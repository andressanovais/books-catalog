service: booksCatalog
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
plugins:
  - serverless-iam-roles-per-function

functions:

  list:
    handler: list.listBooks
    events:
      - http:
          path: /books
          method: get

  get:
    handler: get.getBook
    events: 
      - http:
          path: /books/{id}
          method: get

  sendMessageQueue:
    handler: sendMessageQueue.newBook
    events: 
      - http:
          path: /books
          method: post
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
        - "sqs:SendMessage"
        Resource: "arn:aws:sqs:us-east-1:589322762862:books-to-register"
  
  receiveMessageQueue:
    handler: receiveMessageQueue.newBook
    events:
      - sqs: arn:aws:sqs:us-east-1:589322762862:books-to-register
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
        - "sqs:ReceiveMessage"
        - "sqs:GetQueueAttributes"
        - "sqs:DeleteMessage"
        Resource: "arn:aws:sqs:us-east-1:589322762862:books-to-register"

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
